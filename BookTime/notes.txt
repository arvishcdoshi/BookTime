The test suite runs all the tests which is not ideal 
when we want to have quick feedback on some specific 
refactoring.

1) To run all the views tests
   --> python3/python manage.py test main.tests.test_views.TestPage

2) Run the homepage test
   --> python3/python manage.py test main.tests.test_views.TestPage.test_home_page_works

3) Run all tests 
   --> python3/python manage.py test 

   ***EXPlANATION OF SOME SNIPPETS OF TEST_FORMS.PY***


* For checking number of messages in the box:
  --> print(len(mail.outbox))

* For grabbing an email and check its contents:
  --> first_message = mail.outbox[0]
      print(first_message.subject)
      print(first_message.body)  

* Some standard methods to interact with forms from the view layer
  
  ^ is_clean() :- Runs all validators and clean 
                  functions,to check everything validates
                  correctly.
  ^ errors :- if the form is not valid, this array will
              contain list of errors.

 #NOTE :- When running the built-in web server, the 'LOGS' 
          are written to the terminal/console. When running
          under another web server, Django logs to the server's logs.

ORM(Object Relational Mapper):- 
--> It consists of wrapping all rows loaded from the database into a series of models.
    Models are Python objects that have attributes that correspond to columns in  a 
    database row. 
     
    A model has methods to interact with the underlying database row: 
      save() writes any changes of attributes of the model back into the database.
      delete() deletes the database row.
    These models are declared as Python classes first, inheriting from django.db.models.Model  

We need to create the migrations for model file to work. Migrations are special files that
contain a list of database directives to create tables,add columns, remove them, and so on.

All the data definition language(DDL) commands(those to create and change schemas) are 
wrapped in Python API that is used in migration files.

Database operations such as SELECT and UPDATEs rely on QuerySets and managers.
A manager is a class responsible for building queries against a model.Every model
needs to have atleast one managers.
--> By default, an instance of django.db.models.Manager is connected to every models through
an attribute in the model called objects.
-->All standard methods of manager return QuerySets.

*** QuerySets- A queryset is a collection of models loaded from the database.They are
    constructed and populated by Manager instances.
    QuerySets also have methods that can be used to further filter the models,
    They are similar to Python lists

To enable good string representation for the autocomplete tags, we need to add method,
to all models.

--> def __str__(self):
       return self.name

Page 98 - We might get 404's even if the correct image and thumbnail URL's are served,
to fix that, go to BookTime/urls.py
--> ...
from django.conf.urls.static import static
# add this to end of urlpatterns list
+ static(settings.MEDIA_URL,document_root=settings.MEDIA_ROOT)

## NUTSHELL ON MANAGEMENT COMMANDS ##
--> loaddata and dumpdata are very useful as a simple data loading
mechanism. They are used to bootstrap a database with data from 'fixtures',
which are simple data files in a format that Django understands.
Can be JSON or XML. 

Product Tags will be a fixed set and will be managed by developers, and the 
fixture will be commited by the repository.

DUMPDATA ***
--> python manage.py dumpdata --indent 2 main.ProductTag
The output will contain many internal ID's that are specific to a 
database instance.

To solve this:
+++ - Move ManyToManyField out of tags and into the Product model.
+++ - Make sure the __str__() method for tags is defined.
+++ - Define tags natural_key() method.

After doing first 2 +++ -, as a last step, we will add a method natural_key(),
which will return the tag natural key. In our case, we use slug as the natural
key

Now, it is possible to run dumpdata using natural keys instead of
internal database keys. 

An integer ID isn't always the most convenient way to refer to an object;
sometimes, a more natural reference would be helpful.
For this reasons, Django provides concept of Natural Key.

DEFINITION OF A NATURAL KEY:
--> A natural key is a tuple of values that can be used to 
uniquely identify an object instance without using the 
primary key value.